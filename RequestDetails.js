import React, { useState, useEffect } from "react";
import { db, auth } from "./firebase";
import { collection, doc, getDoc, getDocs, query, where } from "firebase/firestore";
import { useParams } from "react-router-dom";
import BidForm from "./BidForm";

function RequestDetails() {
  const { requestId } = useParams();
  const [request, setRequest] = useState(null);
  const [bids, setBids] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isOwner, setIsOwner] = useState(false);

  useEffect(() => {
    const fetchRequestAndBids = async () => {
      if (!auth.currentUser) {
        console.error("User not logged in");
        return;
      }

      try {
        // **ржкрзНрж░рзЛржбрж╛ржХрзНржЯ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржбрж╛ржЯрж╛ рж▓рзЛржб ржХрж░рзБржи**
        const requestDoc = await getDoc(doc(db, "product_requests", requestId));
        if (requestDoc.exists()) {
          const requestData = { id: requestDoc.id, ...requestDoc.data() };
          setRequest(requestData);

          // **ржПржЗ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯржЯрж┐ ржмрж░рзНрждржорж╛ржи ржЗржЙржЬрж╛рж░рзЗрж░ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзБржи**
          if (auth.currentUser.uid === requestData.userId) {
            setIsOwner(true);
          }

          // **рж╢рзБржзрзБржорж╛рждрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯрзЗрж░ ржорж╛рж▓рж┐ржХ рж╕ржм ржмрж┐ржб ржжрзЗржЦрждрзЗ ржкрж╛рж░ржмрзЗ**
          const q = query(collection(db, "bids"), where("requestId", "==", requestId));
          const querySnapshot = await getDocs(q);
          setBids(querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));
        } else {
          console.error("Request not found");
        }
      } catch (error) {
        console.error("Error fetching data:", error);
      }

      setLoading(false);
    };

    fetchRequestAndBids();
  }, [requestId]);

  if (loading) return <p>тП│ рж▓рзЛржб рж╣ржЪрзНржЫрзЗ...</p>;

  return (
    <div className="container mt-5">
      {request ? (
        <div className="card shadow-sm p-4">
          <h2 className="text-primary">ЁЯЫНя╕П {request.productName}</h2>
          <p><strong>ЁЯУЭ ржмрж┐ржмрж░ржг:</strong> {request.description}</p>
          <p><strong>ЁЯТ░ ржмрж╛ржЬрзЗржЯ:</strong> рз│{request.budget}</p>
          {request.imageURL && <img src={request.imageURL} alt={request.productName} width="100%" className="rounded" />}

          {/* Bid Form */}
          <BidForm requestId={request.id} buyerId={request.userId} />

          {isOwner && (
            <div className="mt-4">
              <h3>ЁЯУй ржЖржкржирж╛рж░ ржЬржирзНржп ржжрзЗрзЯрж╛ ржкрзНрж░рж╕рзНрждрж╛ржмрж┐ржд ржжрж╛ржо</h3>
              <ul className="list-group">
                {bids.length > 0 ? (
                  bids.map((bid) => (
                    <li key={bid.id} className="list-group-item">
                      <strong>ЁЯТ░ рз│{bid.bidAmount}</strong> - {bid.message}
                    </li>
                  ))
                ) : (
                  <p className="text-muted">ЁЯЪл ржПржЦржирзЛ ржХрзЛржирзЛ ржкрзНрж░рж╕рзНрждрж╛ржм ржжрзЗрзЯрж╛ рж╣рзЯржирж┐!</p>
                )}
              </ul>
            </div>
          )}
        </div>
      ) : (
        <p className="text-danger">тЭМ ржкржгрзНржп рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐!</p>
      )}
    </div>
  );
}

export default RequestDetails;
